openapi: 3.0.0
info:
  title: Tindeer API
  description: Notre super API pour notre application mobile de rencontre de Rennes
  version: 1.0.0
servers:
  - url: http://localhost:8000/
    description: Brindeer App
components:
     schemas:
       ProfileDto:
         type: object
         properties:
           id:
             type: string
           userId:
             type: string
           mail:
             type: string
           age:
             type: integer
           firstname:
             type: string
           lastname:
             type: string
           created:
             type: integer
           updated:
             type: integer
       securitySchemes:
         ApiKeyAuth:
           type: apiKey
           in: header
           name: apikey
           oAuthSample: # <---- arbitrary name
             type: oauth2
             description: This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)
             scopes:
               profile: access profile
               email: access email

security:
    - ApiKeyAuth: [ ]
    - oAuthSample:
        - profile
        - email
paths:
  /profile/profile_search:
    get:
      summary: Retourne la liste des profils
      parameters:
        - in: query
          name: mail
          schema:
            type: string
          allowReserved: true
          description: Recherche le profil par mail
      responses:
        '200':
          description: A JSON array of profiles
          content:
            application/json:
              schema:
                type: object
  /profiles/current:
    get:
      summary: Retourne le profile courant de l'utilisateur
      responses:
        '200':    # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    name:
                      type: string
  /profile/sign_in:
    post:
      summary: Création de profil de l'utilisateur
      responses:
        '200': # status code
          description: Le profil crée
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
  /profile/myprofile:
    get:
      summary: Retourne le profil l'utilisateur
      responses:
        '200': # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
  /profile/update:
              put:
                summary: Mettre à jour le profil de l'utilisateur
                requestBody:
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/ProfileDto"
                responses:
                  '200': # status code
                    description: A JSON array of user names
                    content:
                      application/json:
                        schema:
                          type: object
                          properties:
                            name:
                              type: string
  /match/current:
              get:
                summary: Retourne le profile courant de l'utilisateur
                responses:
                  '200': # status code
                    description: A JSON array of user names
                    content:
                      application/json:
                        schema:
                          type: object
                          properties:
                            name:
                              type: string
  /match/users/update:
    post:
      summary: Mettre à jour la localisation de l'utilisateur
      responses:
        '200': # status code
          description: Mettre à jour la localisation de l'utilisateur
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
  /match/users/nearest:
        get:
          summary: Retourne la liste des utilisateurs dans un rayon de 100m
          responses:
            '200': # status code
              description: A JSON array of user names
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      name:
                        type: string